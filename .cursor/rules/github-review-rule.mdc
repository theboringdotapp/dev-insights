---
description: 
globs: 
alwaysApply: true
---
This project goal is to assist developers and their managers to analyse their productivity and efficiency.

The AI Agent MUST follow the following rationale:
1. Understand the user request. Ask any question if requirements are ambiguous; 
2. Plan the tasks into small changes;
3. Write the plan to the user;
4. Perform the changes;
5. Always run npm run lint:fix before finishing;
6. Always run and fix tests with npm test.

It must always:
    - Prioritize excellent UX. Think about what was asked and propose questions and ideas to improve the idea. Never code your ideas without approval first.
    - Have a consistent UI;
    - Build code that is easy to understand and maintain;
    - Avoid creating long files and components. If possible, break-down into smaller components. Be reasonable with this rule;
    - Use clean code and function programming whenever possible;
    - Use zustand State Manager to handle state changes;
    - Use conventional commits;
    - RUN tests before finishing a task;
    - Maintain a clean and direct README, that is always up to date and easy to read. Consider that this is an open source project;
    - Think about security and user privacy;
    - Raise awareness about possible edge-cases, when possible;
    - Consider that you (AI) have a limited context. So whenever you detailed a plan for the future, write it in a way that it can be easily understood by you in the future, even with reduced context;
    - Raise awareness whenever you see that a new rule was asked and could be added to the .rules file.

As for the UI:
    - The project should have a clean, modern UI, based on Github, ShadCN, Linear UI components.
    - It can standout using Motion UI;
    - It must be responsive and mobile-friendly;

Code Principles:
    - Prefer iteration and modularization over duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    - Use lowercase with dashes for directories (e.g., components/auth-wizard).
    - Favor named exports for components.

JavaScript/TypeScript
    - Use "function" keyword for pure functions. Omit semicolons.
    - Use TypeScript for all code. Prefer interfaces over types.
    - File structure: Exported component, subcomponents, helpers, static content, types.

Error Handling and Validation
    - Prioritize error handling and edge cases:
        - Handle errors and edge cases at the beginning of functions.
        - Use early returns for error conditions to avoid deeply nested if statements.
        - Place the happy path last in the function for improved readability.
        - Avoid unnecessary else statements; use if-return pattern instead.
        - Use guard clauses to handle preconditions and invalid states early.
        - Implement proper error logging and user-friendly error messages.

AI SDK
    - Implement proper error handling for AI responses and model switching.
    - Implement fallback mechanisms for when an AI model is unavailable.
    - Handle rate limiting and quota exceeded scenarios gracefully.
    - Provide clear error messages to users when AI interactions fail.
    - Implement proper input sanitization for user messages before sending to AI models.
    - Use environment variables for storing API keys and sensitive information.

 Key Conventions
    1. Rely on Next.js App Router for state changes and routing.
    2. Prioritize Web Vitals (LCP, CLS, FID).
    3. Minimize 'use client' usage:
      - Prefer server components and Next.js SSR features.
      - Use 'use client' only for Web API access in small components.
      - Avoid using 'use client' for data fetching or state management.
    5. Use Taskfile commands for development and deployment tasks.
    6. Adhere to the defined database schema and use enum tables for predefined values.

 Component Structure
    - Break down components into smaller parts with minimal props.
    - Suggest micro folder structure for components.
    - Use composition to build complex components.
    - Follow the order: component declaration, styled components (if any), TypeScript types.

Styling
    - Use Tailwind CSS for styling, following the Utility First approach.
    - Utilize the Class Variance Authority (CVA) for managing component variants.

Testing
    - Implement unit tests for utility functions and hooks.
    - Use integration tests for complex components and pages.
    - Implement end-to-end tests for critical user flows.


GitHub Review Project Overview

## Project Purpose
This is a developer productivity and efficiency analysis tool that helps developers and managers analyze their GitHub contributions. The application provides insights into code quality and patterns across pull requests.

## Key Components

### Main Features
1. **Timeline** - Shows a chronological view of PRs grouped by month
2. **PR Analysis** - Provides AI-powered code quality analysis for individual PRs
3. **Code Quality Assistant** - A meta-analysis component showing patterns across all analyzed PRs

### Core Technologies
- React with TypeScript
- Next.js App Router
- Tailwind CSS for styling
- Zustand for state management

### Architecture

#### Component Structure
- `DeveloperDashboard` - Main container with a two-column layout (Timeline and Assistant)
- `Timeline` - Shows PRs grouped by month
- `PullRequestCard` - Individual PR display with metrics, commits, and analysis
- `CodeQualityInsights` - AI assistant with meta-analysis (right sidebar)

#### Key UI Components
- `CommitsList` - Collapsible list of commits in a PR
- `PRAnalysisDetails` - Collapsible analysis results for a PR
- `MetricsSummary` - Overview stats in the Assistant
- `InsightsSummary` - Common patterns across analyzed PRs

#### Data Flow
- PRs are fetched from GitHub API
- PR analysis is performed using OpenAI/Anthropic/Gemini (user can configure)
- Analysis results are stored in memory and persistent cache
- Meta-analysis patterns are generated from all analyzed PRs

### Recent Updates
We recently improved the UX by:
1. Moving individual PR analysis directly into the PR cards in the Timeline
2. Transforming CodeQualityInsights into a sticky sidebar assistant
3. Creating a more minimalistic, consistent design with a purple theme for interactive elements
4. Making analysis components more discoverable with better visual design
5. Fixing calculation logic for percentage display (assuming 0-10 scale for scores)

### Design Guidelines
- Clean, minimalistic UI with moderate use of color
- Purple theme for interactive elements
- Consistent spacing and typography
- Collapsible sections with clear visual cues
- Responsive design that works on mobile and desktop

The project aims to provide excellent UX with intuitive navigation between individual PR analysis and meta-analysis patterns across all PRs.
